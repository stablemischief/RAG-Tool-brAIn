# RAG Tool Standalone - Production Docker Compose Configuration
# Optimized for VPS deployment with SSL and security hardening

version: '3.8'

services:
  # Reverse proxy for SSL termination and security
  nginx:
    image: nginx:alpine
    container_name: rag-tool-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - rag-tool-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI service (production optimized)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-tool-backend
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      # Production environment
      - ENVIRONMENT=production
      - DEBUG=false
      
      # OpenAI Configuration (CRITICAL)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL_NAME=text-embedding-3-small
      - EMBEDDING_DIMENSIONS=1536
      
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Google Drive Service Account
      - GOOGLE_SERVICE_ACCOUNT_PATH=/app/config/service-account.json
      - GOOGLE_DRIVE_FOLDER_ID=${GOOGLE_DRIVE_FOLDER_ID}
      - POLLING_INTERVAL=${POLLING_INTERVAL:-300}
      
      # Production settings
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      - CLEANUP_ENABLED=true
      - MAX_FILE_SIZE_MB=100
      
      # Security settings
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
    volumes:
      - ./config/service-account.json:/app/config/service-account.json:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
    networks:
      - rag-tool-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Frontend Next.js service (production optimized)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-tool-frontend
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://yourdomain.com/api
      - NEXT_PUBLIC_WS_URL=wss://yourdomain.com/ws
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - backend
    networks:
      - rag-tool-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis with persistent storage and authentication
  redis:
    image: redis:7-alpine
    container_name: rag-tool-redis
    restart: unless-stopped
    expose:
      - "6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - rag-tool-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregator (optional but recommended for production)
  loki:
    image: grafana/loki:2.9.0
    container_name: rag-tool-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - rag-tool-network
    command: -config.file=/etc/loki/local-config.yaml

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-tool-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - rag-tool-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

# Production volumes with backup strategies
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/rag-tool/data/redis
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: /opt/rag-tool/data/loki
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/rag-tool/data/prometheus

# Secure network with custom subnet
networks:
  rag-tool-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: rag-tool-br0